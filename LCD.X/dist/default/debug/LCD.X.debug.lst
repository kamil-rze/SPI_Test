

Microchip Technology PIC LITE Macro Assembler V1.42 build -159332390 
                                                                                               Wed Oct 11 21:29:31 2017

Microchip Technology Omniscient Code Generator v1.42 (Free mode) build 201704130522
     1                           	processor	16F887
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	inittext,global,class=CODE,delta=2
     8                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	maintext,global,class=CODE,split=1,delta=2
    11                           	psect	text1,local,class=CODE,merge=1,delta=2
    12                           	psect	text2,local,class=CODE,merge=1,delta=2
    13                           	psect	text3,local,class=CODE,merge=1,delta=2
    14                           	psect	text4,local,class=CODE,merge=1,delta=2
    15                           	psect	text5,local,class=CODE,merge=1,delta=2
    16                           	psect	text6,local,class=CODE,merge=1,delta=2
    17                           	psect	text7,local,class=CODE,merge=1,delta=2
    18                           	dabs	1,0x7E,2
    19  0000                     
    20                           ; Version 1.42
    21                           ; Generated 13/04/2017 GMT
    22                           ; 
    23                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    24                           ; All rights reserved.
    25                           ; 
    26                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    27                           ; 
    28                           ; Redistribution and use in source and binary forms, with or without modification, are
    29                           ; permitted provided that the following conditions are met:
    30                           ; 
    31                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    32                           ;        conditions and the following disclaimer.
    33                           ; 
    34                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    35                           ;        of conditions and the following disclaimer in the documentation and/or other
    36                           ;        materials provided with the distribution.
    37                           ; 
    38                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    39                           ;        software without specific prior written permission.
    40                           ; 
    41                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    42                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    43                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    44                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    45                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    46                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    47                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    48                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    49                           ; 
    50                           ; 
    51                           ; Code-generator required, PIC16F887 Definitions
    52                           ; 
    53                           ; SFR Addresses
    54  0000                     	;# 
    55  0001                     	;# 
    56  0002                     	;# 
    57  0003                     	;# 
    58  0004                     	;# 
    59  0005                     	;# 
    60  0006                     	;# 
    61  0007                     	;# 
    62  0008                     	;# 
    63  0009                     	;# 
    64  000A                     	;# 
    65  000B                     	;# 
    66  000C                     	;# 
    67  000D                     	;# 
    68  000E                     	;# 
    69  000E                     	;# 
    70  000F                     	;# 
    71  0010                     	;# 
    72  0011                     	;# 
    73  0012                     	;# 
    74  0013                     	;# 
    75  0014                     	;# 
    76  0015                     	;# 
    77  0015                     	;# 
    78  0016                     	;# 
    79  0017                     	;# 
    80  0018                     	;# 
    81  0019                     	;# 
    82  001A                     	;# 
    83  001B                     	;# 
    84  001B                     	;# 
    85  001C                     	;# 
    86  001D                     	;# 
    87  001E                     	;# 
    88  001F                     	;# 
    89  0081                     	;# 
    90  0085                     	;# 
    91  0086                     	;# 
    92  0087                     	;# 
    93  0088                     	;# 
    94  0089                     	;# 
    95  008C                     	;# 
    96  008D                     	;# 
    97  008E                     	;# 
    98  008F                     	;# 
    99  0090                     	;# 
   100  0091                     	;# 
   101  0092                     	;# 
   102  0093                     	;# 
   103  0093                     	;# 
   104  0093                     	;# 
   105  0094                     	;# 
   106  0095                     	;# 
   107  0096                     	;# 
   108  0097                     	;# 
   109  0098                     	;# 
   110  0099                     	;# 
   111  009A                     	;# 
   112  009B                     	;# 
   113  009C                     	;# 
   114  009D                     	;# 
   115  009E                     	;# 
   116  009F                     	;# 
   117  0105                     	;# 
   118  0107                     	;# 
   119  0108                     	;# 
   120  0109                     	;# 
   121  010C                     	;# 
   122  010C                     	;# 
   123  010D                     	;# 
   124  010E                     	;# 
   125  010F                     	;# 
   126  0185                     	;# 
   127  0187                     	;# 
   128  0188                     	;# 
   129  0189                     	;# 
   130  018C                     	;# 
   131  018D                     	;# 
   132                           
   133                           	psect	idataBANK0
   134  069B                     __pidataBANK0:	
   135                           
   136                           ;initializer for main@F1683
   137  069B  3443               	retlw	67
   138  069C  347A               	retlw	122
   139  069D  3465               	retlw	101
   140  069E  3473               	retlw	115
   141  069F  3463               	retlw	99
   142  06A0  3420               	retlw	32
   143  06A1  344B               	retlw	75
   144  06A2  3475               	retlw	117
   145  06A3  3462               	retlw	98
   146  06A4  3461               	retlw	97
   147  06A5  3421               	retlw	33
   148  06A6  3400               	retlw	0
   149  0009                     _PORTE	set	9
   150  0008                     _PORTD	set	8
   151  0006                     _PORTB	set	6
   152  0005                     _PORTA	set	5
   153  0089                     _TRISE	set	137
   154  0088                     _TRISD	set	136
   155  0087                     _TRISC	set	135
   156  0086                     _TRISB	set	134
   157  0085                     _TRISA	set	133
   158  008F                     _OSCCON	set	143
   159  0189                     _ANSELH	set	393
   160  0188                     _ANSEL	set	392
   161                           
   162                           ; #config settings
   163  0000                     
   164                           	psect	cinit
   165  07F0                     start_initialization:	
   166  07F0                     __initialization:	
   167                           
   168                           ; Initialize objects allocated to BANK0
   169  07F0  1383               	bcf	3,7	;select IRP bank0
   170  07F1  302C               	movlw	low (__pdataBANK0+12)
   171  07F2  00FD               	movwf	btemp+-1
   172  07F3  3006               	movlw	high __pidataBANK0
   173  07F4  00FE               	movwf	btemp
   174  07F5  309B               	movlw	low __pidataBANK0
   175  07F6  00FF               	movwf	btemp+1
   176  07F7  3020               	movlw	low __pdataBANK0
   177  07F8  0084               	movwf	4
   178  07F9  120A  118A  26BB   	fcall	init_ram0
   179  07FC                     end_of_initialization:	
   180                           ;End of C runtime variable initialization code
   181                           
   182  07FC                     __end_of__initialization:	
   183  07FC  0183               	clrf	3
   184  07FD  120A  118A  2F65   	ljmp	_main	;jump to C main() function
   185                           
   186                           	psect	dataBANK0
   187  0020                     __pdataBANK0:	
   188  0020                     main@F1683:	
   189  0020                     	ds	12
   190                           
   191                           	psect	inittext
   192  06B7                     init_fetch0:	
   193                           ;	Called with low address in FSR and high address in W
   194                           
   195  06B7  087E               	movf	126,w
   196  06B8  008A               	movwf	10
   197  06B9  087F               	movf	127,w
   198  06BA  0082               	movwf	2
   199  06BB                     init_ram0:	
   200                           ;Called with:
   201                           ;	high address of idata address in btemp 
   202                           ;	low address of idata address in btemp+1 
   203                           ;	low address of data in FSR
   204                           ;	high address + 1 of data in btemp-1
   205                           
   206  06BB  26B7  120A  118A   	fcall	init_fetch0
   207  06BE  0080               	movwf	0
   208  06BF  0A84               	incf	4,f
   209  06C0  0804               	movf	4,w
   210  06C1  067D               	xorwf	125,w
   211  06C2  1903               	btfsc	3,2
   212  06C3  3400               	retlw	0
   213  06C4  0AFF               	incf	127,f
   214  06C5  1903               	btfsc	3,2
   215  06C6  0AFE               	incf	126,f
   216  06C7  2EBB               	goto	init_ram0
   217                           
   218                           	psect	cstackCOMMON
   219  0071                     __pcstackCOMMON:	
   220  0071                     ?_Init:	
   221  0071                     ??_Init:	
   222                           ; 1 bytes @ 0x0
   223                           
   224  0071                     ?_lcd_reset:	
   225                           ; 1 bytes @ 0x0
   226                           
   227  0071                     ??_lcd_reset:	
   228                           ; 1 bytes @ 0x0
   229                           
   230  0071                     ?_lcd_cmd:	
   231                           ; 1 bytes @ 0x0
   232                           
   233  0071                     ??_lcd_cmd:	
   234                           ; 1 bytes @ 0x0
   235                           
   236  0071                     ?_lcd_init:	
   237                           ; 1 bytes @ 0x0
   238                           
   239  0071                     ?_lcd_data:	
   240                           ; 1 bytes @ 0x0
   241                           
   242  0071                     ??_lcd_data:	
   243                           ; 1 bytes @ 0x0
   244                           
   245  0071                     ?_lcd_clear:	
   246                           ; 1 bytes @ 0x0
   247                           
   248  0071                     ?_main:	
   249                           ; 1 bytes @ 0x0
   250                           
   251                           
   252                           ; 1 bytes @ 0x0
   253  0071                     	ds	1
   254  0072                     lcd_cmd@cmd:	
   255  0072                     lcd_data@dat:	
   256                           ; 1 bytes @ 0x1
   257                           
   258                           
   259                           ; 1 bytes @ 0x1
   260  0072                     	ds	1
   261  0073                     ??_lcd_init:	
   262  0073                     ?_lcd_send_string:	
   263                           ; 1 bytes @ 0x2
   264                           
   265  0073                     ??_lcd_clear:	
   266                           ; 1 bytes @ 0x2
   267                           
   268  0073                     lcd_send_string@length:	
   269                           ; 1 bytes @ 0x2
   270                           
   271                           
   272                           ; 1 bytes @ 0x2
   273  0073                     	ds	1
   274  0074                     ??_lcd_send_string:	
   275                           
   276                           ; 1 bytes @ 0x3
   277  0074                     	ds	1
   278  0075                     lcd_send_string@str:	
   279                           
   280                           ; 1 bytes @ 0x4
   281  0075                     	ds	1
   282  0076                     ??_main:	
   283                           
   284                           ; 1 bytes @ 0x5
   285  0076                     	ds	4
   286                           
   287                           	psect	cstackBANK0
   288  002C                     __pcstackBANK0:	
   289  002C                     main@text:	
   290                           
   291                           ; 12 bytes @ 0x0
   292  002C                     	ds	12
   293                           
   294                           	psect	maintext
   295  0765                     __pmaintext:	
   296 ;;
   297 ;;Main: autosize = 0, tempsize = 4, incstack = 0, save=0
   298 ;;
   299 ;; *************** function _main *****************
   300 ;; Defined at:
   301 ;;		line 112 in file "main_LCD.c"
   302 ;; Parameters:    Size  Location     Type
   303 ;;		None
   304 ;; Auto vars:     Size  Location     Type
   305 ;;  text           12    0[BANK0 ] unsigned char [12]
   306 ;; Return value:  Size  Location     Type
   307 ;;                  1    wreg      void 
   308 ;; Registers used:
   309 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   310 ;; Tracked objects:
   311 ;;		On entry : B00/0
   312 ;;		On exit  : 0/0
   313 ;;		Unchanged: 0/0
   314 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   315 ;;      Params:         0       0       0       0       0
   316 ;;      Locals:         0      12       0       0       0
   317 ;;      Temps:          4       0       0       0       0
   318 ;;      Totals:         4      12       0       0       0
   319 ;;Total ram usage:       16 bytes
   320 ;; Hardware stack levels required when called:    2
   321 ;; This function calls:
   322 ;;		_Init
   323 ;;		_lcd_clear
   324 ;;		_lcd_init
   325 ;;		_lcd_send_string
   326 ;; This function is called by:
   327 ;;		Startup code after reset
   328 ;; This function uses a non-reentrant model
   329 ;;
   330                           
   331                           
   332                           ;psect for function _main
   333  0765                     _main:	
   334                           
   335                           ;main_LCD.c: 113: unsigned char text[] = "Czesc Kuba!";
   336                           
   337                           ;incstack = 0
   338                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   339  0765  302C               	movlw	main@text& (0+255)
   340  0766  0084               	movwf	4
   341  0767  3020               	movlw	low main@F1683
   342  0768  00F6               	movwf	??_main
   343  0769  0804               	movf	4,w
   344  076A  00F7               	movwf	??_main+1
   345  076B  300C               	movlw	12
   346  076C  00F8               	movwf	??_main+2
   347  076D                     u160:	
   348  076D  0876               	movf	??_main,w
   349  076E  0084               	movwf	4
   350  076F  1383               	bcf	3,7	;select IRP bank0
   351  0770  0800               	movf	0,w
   352  0771  00F9               	movwf	??_main+3
   353  0772  0AF6               	incf	??_main,f
   354  0773  0877               	movf	??_main+1,w
   355  0774  0084               	movwf	4
   356  0775  0879               	movf	??_main+3,w
   357  0776  0080               	movwf	0
   358  0777  0AF7               	incf	??_main+1,f
   359  0778  0BF8               	decfsz	??_main+2,f
   360  0779  2F6D               	goto	u160
   361                           
   362                           ;main_LCD.c: 114: Init();
   363  077A  120A  118A  26DC  120A  118A  	fcall	_Init
   364                           
   365                           ;main_LCD.c: 115: lcd_init();
   366  077F  120A  118A  26F3  120A  118A  	fcall	_lcd_init
   367                           
   368                           ;main_LCD.c: 116: lcd_clear();
   369  0784  120A  118A  26A7  120A  118A  	fcall	_lcd_clear
   370                           
   371                           ;main_LCD.c: 117: lcd_send_string(text,11);
   372  0789  300B               	movlw	11
   373  078A  00F6               	movwf	??_main
   374  078B  0876               	movf	??_main,w
   375  078C  00F3               	movwf	lcd_send_string@length
   376  078D  302C               	movlw	(low (main@text| 0))& (0+255)
   377  078E  120A  118A  26C8  120A  118A  	fcall	_lcd_send_string
   378                           
   379                           ;main_LCD.c: 118: _delay((unsigned long)((1500)*(8000000UL/4000.0)));
   380  0793  3010               	movlw	16
   381  0794  00F8               	movwf	??_main+2
   382  0795  3039               	movlw	57
   383  0796  00F7               	movwf	??_main+1
   384  0797  300D               	movlw	13
   385  0798  00F6               	movwf	??_main
   386  0799                     u177:	
   387  0799  0BF6               	decfsz	??_main,f
   388  079A  2F99               	goto	u177
   389  079B  0BF7               	decfsz	??_main+1,f
   390  079C  2F99               	goto	u177
   391  079D  0BF8               	decfsz	??_main+2,f
   392  079E  2F99               	goto	u177
   393  079F  2FA0               	nop2
   394                           
   395                           ;main_LCD.c: 125: lcd_clear();
   396  07A0  120A  118A  26A7  120A  118A  	fcall	_lcd_clear
   397  07A5                     l68:	
   398                           ;main_LCD.c: 126: while(1);
   399                           
   400  07A5  2FA5               	goto	l68
   401  07A6                     __end_of_main:	
   402                           ;main_LCD.c: 127: return;
   403                           
   404                           
   405                           	psect	text1
   406  06C8                     __ptext1:	
   407 ;; *************** function _lcd_send_string *****************
   408 ;; Defined at:
   409 ;;		line 84 in file "main_LCD.c"
   410 ;; Parameters:    Size  Location     Type
   411 ;;  str             1    wreg     PTR unsigned char 
   412 ;;		 -> main@text(12), 
   413 ;;  length          1    2[COMMON] unsigned char 
   414 ;; Auto vars:     Size  Location     Type
   415 ;;  str             1    4[COMMON] PTR unsigned char 
   416 ;;		 -> main@text(12), 
   417 ;; Return value:  Size  Location     Type
   418 ;;                  1    wreg      void 
   419 ;; Registers used:
   420 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   421 ;; Tracked objects:
   422 ;;		On entry : 0/0
   423 ;;		On exit  : 0/0
   424 ;;		Unchanged: 0/0
   425 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   426 ;;      Params:         1       0       0       0       0
   427 ;;      Locals:         1       0       0       0       0
   428 ;;      Temps:          1       0       0       0       0
   429 ;;      Totals:         3       0       0       0       0
   430 ;;Total ram usage:        3 bytes
   431 ;; Hardware stack levels used:    1
   432 ;; Hardware stack levels required when called:    1
   433 ;; This function calls:
   434 ;;		_lcd_data
   435 ;; This function is called by:
   436 ;;		_main
   437 ;; This function uses a non-reentrant model
   438 ;;
   439                           
   440                           
   441                           ;psect for function _lcd_send_string
   442  06C8                     _lcd_send_string:	
   443                           
   444                           ;incstack = 0
   445                           ; Regs used in _lcd_send_string: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   446                           ;lcd_send_string@str stored from wreg
   447  06C8  00F5               	movwf	lcd_send_string@str
   448  06C9                     l643:	
   449                           ;main_LCD.c: 86: while(length--) lcd_data(*str++);
   450                           
   451  06C9  3001               	movlw	1
   452  06CA  02F3               	subwf	lcd_send_string@length,f
   453  06CB  0A73               	incf	lcd_send_string@length,w
   454  06CC  1903               	btfsc	3,2
   455  06CD  0008               	return
   456  06CE  0875               	movf	lcd_send_string@str,w
   457  06CF  0084               	movwf	4
   458  06D0  1383               	bcf	3,7	;select IRP bank0
   459  06D1  0800               	movf	0,w
   460  06D2  120A  118A  2739  120A  118A  	fcall	_lcd_data
   461  06D7  3001               	movlw	1
   462  06D8  00F4               	movwf	??_lcd_send_string
   463  06D9  0874               	movf	??_lcd_send_string,w
   464  06DA  07F5               	addwf	lcd_send_string@str,f
   465  06DB  2EC9               	goto	l643
   466  06DC                     __end_of_lcd_send_string:	
   467                           
   468                           	psect	text2
   469  0739                     __ptext2:	
   470 ;; *************** function _lcd_data *****************
   471 ;; Defined at:
   472 ;;		line 73 in file "main_LCD.c"
   473 ;; Parameters:    Size  Location     Type
   474 ;;  dat             1    wreg     unsigned char 
   475 ;; Auto vars:     Size  Location     Type
   476 ;;  dat             1    1[COMMON] unsigned char 
   477 ;; Return value:  Size  Location     Type
   478 ;;                  1    wreg      void 
   479 ;; Registers used:
   480 ;;		wreg, status,2, status,0
   481 ;; Tracked objects:
   482 ;;		On entry : 0/0
   483 ;;		On exit  : 0/0
   484 ;;		Unchanged: 0/0
   485 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   486 ;;      Params:         0       0       0       0       0
   487 ;;      Locals:         1       0       0       0       0
   488 ;;      Temps:          1       0       0       0       0
   489 ;;      Totals:         2       0       0       0       0
   490 ;;Total ram usage:        2 bytes
   491 ;; Hardware stack levels used:    1
   492 ;; This function calls:
   493 ;;		Nothing
   494 ;; This function is called by:
   495 ;;		_lcd_send_string
   496 ;; This function uses a non-reentrant model
   497 ;;
   498                           
   499                           
   500                           ;psect for function _lcd_data
   501  0739                     _lcd_data:	
   502                           
   503                           ;incstack = 0
   504                           ; Regs used in _lcd_data: [wreg+status,2+status,0]
   505                           ;lcd_data@dat stored from wreg
   506  0739  00F2               	movwf	lcd_data@dat
   507                           
   508                           ;main_LCD.c: 75: PORTD = (unsigned)(((dat >> 4) & 0x0F) | 0x20 |0x10);
   509  073A  0872               	movf	lcd_data@dat,w
   510  073B  00F1               	movwf	??_lcd_data
   511  073C  3004               	movlw	4
   512  073D                     u115:	
   513  073D  1003               	clrc
   514  073E  0CF1               	rrf	??_lcd_data,f
   515  073F  3EFF               	addlw	-1
   516  0740  1D03               	skipz
   517  0741  2F3D               	goto	u115
   518  0742  0871               	movf	??_lcd_data,w
   519  0743  390F               	andlw	15
   520  0744  3830               	iorlw	48
   521  0745  1283               	bcf	3,5	;RP0=0, select bank0
   522  0746  1303               	bcf	3,6	;RP1=0, select bank0
   523  0747  0088               	movwf	8	;volatile
   524                           
   525                           ;main_LCD.c: 76: PORTD = (unsigned)(((dat >> 4) & 0x0F) | 0x10);
   526  0748  0872               	movf	lcd_data@dat,w
   527  0749  00F1               	movwf	??_lcd_data
   528  074A  3004               	movlw	4
   529  074B                     u125:	
   530  074B  1003               	clrc
   531  074C  0CF1               	rrf	??_lcd_data,f
   532  074D  3EFF               	addlw	-1
   533  074E  1D03               	skipz
   534  074F  2F4B               	goto	u125
   535  0750  0871               	movf	??_lcd_data,w
   536  0751  390F               	andlw	15
   537  0752  3810               	iorlw	16
   538  0753  0088               	movwf	8	;volatile
   539                           
   540                           ;main_LCD.c: 77: PORTD = (unsigned)((dat & 0x0F)|0x20|0x10);
   541  0754  0872               	movf	lcd_data@dat,w
   542  0755  390F               	andlw	15
   543  0756  3830               	iorlw	48
   544  0757  0088               	movwf	8	;volatile
   545                           
   546                           ;main_LCD.c: 78: PORTD = (unsigned)((dat & 0x0F)|0x10);
   547  0758  0872               	movf	lcd_data@dat,w
   548  0759  390F               	andlw	15
   549  075A  3810               	iorlw	16
   550  075B  0088               	movwf	8	;volatile
   551                           
   552                           ;main_LCD.c: 79: _delay((unsigned long)((200)*(8000000UL/4000000.0)));
   553  075C  3085               	movlw	133
   554  075D  00F1               	movwf	??_lcd_data
   555  075E                     u187:	
   556  075E  0BF1               	decfsz	??_lcd_data,f
   557  075F  2F5E               	goto	u187
   558                           
   559                           ;main_LCD.c: 80: _delay((unsigned long)((200)*(8000000UL/4000000.0)));
   560  0760  3085               	movlw	133
   561  0761  00F1               	movwf	??_lcd_data
   562  0762                     u197:	
   563  0762  0BF1               	decfsz	??_lcd_data,f
   564  0763  2F62               	goto	u197
   565  0764  0008               	return
   566  0765                     __end_of_lcd_data:	
   567                           
   568                           	psect	text3
   569  06F3                     __ptext3:	
   570 ;; *************** function _lcd_init *****************
   571 ;; Defined at:
   572 ;;		line 60 in file "main_LCD.c"
   573 ;; Parameters:    Size  Location     Type
   574 ;;		None
   575 ;; Auto vars:     Size  Location     Type
   576 ;;		None
   577 ;; Return value:  Size  Location     Type
   578 ;;                  1    wreg      void 
   579 ;; Registers used:
   580 ;;		wreg, status,2, status,0, pclath, cstack
   581 ;; Tracked objects:
   582 ;;		On entry : 0/0
   583 ;;		On exit  : 0/0
   584 ;;		Unchanged: 0/0
   585 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   586 ;;      Params:         0       0       0       0       0
   587 ;;      Locals:         0       0       0       0       0
   588 ;;      Temps:          0       0       0       0       0
   589 ;;      Totals:         0       0       0       0       0
   590 ;;Total ram usage:        0 bytes
   591 ;; Hardware stack levels used:    1
   592 ;; Hardware stack levels required when called:    1
   593 ;; This function calls:
   594 ;;		_lcd_cmd
   595 ;;		_lcd_reset
   596 ;; This function is called by:
   597 ;;		_main
   598 ;; This function uses a non-reentrant model
   599 ;;
   600                           
   601                           
   602                           ;psect for function _lcd_init
   603  06F3                     _lcd_init:	
   604                           
   605                           ;main_LCD.c: 62: lcd_reset();
   606                           
   607                           ;incstack = 0
   608                           ; Regs used in _lcd_init: [wreg+status,2+status,0+pclath+cstack]
   609  06F3  120A  118A  27A6  120A  118A  	fcall	_lcd_reset
   610                           
   611                           ;main_LCD.c: 63: lcd_cmd(0x28);
   612  06F8  3028               	movlw	40
   613  06F9  120A  118A  270F  120A  118A  	fcall	_lcd_cmd
   614                           
   615                           ;main_LCD.c: 64: lcd_cmd(0x0C);
   616  06FE  300C               	movlw	12
   617  06FF  120A  118A  270F  120A  118A  	fcall	_lcd_cmd
   618                           
   619                           ;main_LCD.c: 65: lcd_cmd(0x06);
   620  0704  3006               	movlw	6
   621  0705  120A  118A  270F  120A  118A  	fcall	_lcd_cmd
   622                           
   623                           ;main_LCD.c: 66: lcd_cmd(0x80);
   624  070A  3080               	movlw	128
   625  070B  120A  118A  270F   	fcall	_lcd_cmd
   626  070E  0008               	return
   627  070F                     __end_of_lcd_init:	
   628                           
   629                           	psect	text4
   630  07A6                     __ptext4:	
   631 ;; *************** function _lcd_reset *****************
   632 ;; Defined at:
   633 ;;		line 30 in file "main_LCD.c"
   634 ;; Parameters:    Size  Location     Type
   635 ;;		None
   636 ;; Auto vars:     Size  Location     Type
   637 ;;		None
   638 ;; Return value:  Size  Location     Type
   639 ;;                  1    wreg      void 
   640 ;; Registers used:
   641 ;;		wreg
   642 ;; Tracked objects:
   643 ;;		On entry : 0/0
   644 ;;		On exit  : 0/0
   645 ;;		Unchanged: 0/0
   646 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   647 ;;      Params:         0       0       0       0       0
   648 ;;      Locals:         0       0       0       0       0
   649 ;;      Temps:          2       0       0       0       0
   650 ;;      Totals:         2       0       0       0       0
   651 ;;Total ram usage:        2 bytes
   652 ;; Hardware stack levels used:    1
   653 ;; This function calls:
   654 ;;		Nothing
   655 ;; This function is called by:
   656 ;;		_lcd_init
   657 ;; This function uses a non-reentrant model
   658 ;;
   659                           
   660                           
   661                           ;psect for function _lcd_reset
   662  07A6                     _lcd_reset:	
   663                           
   664                           ;main_LCD.c: 32: PORTD = 0xFF;
   665                           
   666                           ;incstack = 0
   667                           ; Regs used in _lcd_reset: [wreg]
   668  07A6  30FF               	movlw	255
   669  07A7  1283               	bcf	3,5	;RP0=0, select bank0
   670  07A8  1303               	bcf	3,6	;RP1=0, select bank0
   671  07A9  0088               	movwf	8	;volatile
   672                           
   673                           ;main_LCD.c: 33: _delay((unsigned long)((20)*(8000000UL/4000.0)));
   674  07AA  3034               	movlw	52
   675  07AB  00F2               	movwf	??_lcd_reset+1
   676  07AC  30F1               	movlw	241
   677  07AD  00F1               	movwf	??_lcd_reset
   678  07AE                     u207:	
   679  07AE  0BF1               	decfsz	??_lcd_reset,f
   680  07AF  2FAE               	goto	u207
   681  07B0  0BF2               	decfsz	??_lcd_reset+1,f
   682  07B1  2FAE               	goto	u207
   683  07B2  2FB3               	nop2
   684                           
   685                           ;main_LCD.c: 34: PORTD = 0x03 + 0x20;
   686  07B3  3023               	movlw	35
   687  07B4  1283               	bcf	3,5	;RP0=0, select bank0
   688  07B5  1303               	bcf	3,6	;RP1=0, select bank0
   689  07B6  0088               	movwf	8	;volatile
   690                           
   691                           ;main_LCD.c: 35: PORTD = 0x03;
   692  07B7  3003               	movlw	3
   693  07B8  0088               	movwf	8	;volatile
   694                           
   695                           ;main_LCD.c: 36: _delay((unsigned long)((10)*(8000000UL/4000.0)));
   696  07B9  301A               	movlw	26
   697  07BA  00F2               	movwf	??_lcd_reset+1
   698  07BB  30F8               	movlw	248
   699  07BC  00F1               	movwf	??_lcd_reset
   700  07BD                     u217:	
   701  07BD  0BF1               	decfsz	??_lcd_reset,f
   702  07BE  2FBD               	goto	u217
   703  07BF  0BF2               	decfsz	??_lcd_reset+1,f
   704  07C0  2FBD               	goto	u217
   705  07C1  0000               	nop
   706                           
   707                           ;main_LCD.c: 37: PORTD = 0x03 + 0x20;
   708  07C2  3023               	movlw	35
   709  07C3  1283               	bcf	3,5	;RP0=0, select bank0
   710  07C4  1303               	bcf	3,6	;RP1=0, select bank0
   711  07C5  0088               	movwf	8	;volatile
   712                           
   713                           ;main_LCD.c: 38: PORTD = 0x03;
   714  07C6  3003               	movlw	3
   715  07C7  0088               	movwf	8	;volatile
   716                           
   717                           ;main_LCD.c: 39: _delay((unsigned long)((1)*(8000000UL/4000.0)));
   718  07C8  3003               	movlw	3
   719  07C9  00F2               	movwf	??_lcd_reset+1
   720  07CA  3097               	movlw	151
   721  07CB  00F1               	movwf	??_lcd_reset
   722  07CC                     u227:	
   723  07CC  0BF1               	decfsz	??_lcd_reset,f
   724  07CD  2FCC               	goto	u227
   725  07CE  0BF2               	decfsz	??_lcd_reset+1,f
   726  07CF  2FCC               	goto	u227
   727  07D0  2FD1               	nop2
   728                           
   729                           ;main_LCD.c: 40: PORTD = 0x03 + 0x20;
   730  07D1  3023               	movlw	35
   731  07D2  1283               	bcf	3,5	;RP0=0, select bank0
   732  07D3  1303               	bcf	3,6	;RP1=0, select bank0
   733  07D4  0088               	movwf	8	;volatile
   734                           
   735                           ;main_LCD.c: 41: PORTD = 0x03;
   736  07D5  3003               	movlw	3
   737  07D6  0088               	movwf	8	;volatile
   738                           
   739                           ;main_LCD.c: 42: _delay((unsigned long)((1)*(8000000UL/4000.0)));
   740  07D7  3003               	movlw	3
   741  07D8  00F2               	movwf	??_lcd_reset+1
   742  07D9  3097               	movlw	151
   743  07DA  00F1               	movwf	??_lcd_reset
   744  07DB                     u237:	
   745  07DB  0BF1               	decfsz	??_lcd_reset,f
   746  07DC  2FDB               	goto	u237
   747  07DD  0BF2               	decfsz	??_lcd_reset+1,f
   748  07DE  2FDB               	goto	u237
   749  07DF  2FE0               	nop2
   750                           
   751                           ;main_LCD.c: 43: PORTD = 0x02 + 0x20;
   752  07E0  3022               	movlw	34
   753  07E1  1283               	bcf	3,5	;RP0=0, select bank0
   754  07E2  1303               	bcf	3,6	;RP1=0, select bank0
   755  07E3  0088               	movwf	8	;volatile
   756                           
   757                           ;main_LCD.c: 44: PORTD = 0x02;
   758  07E4  3002               	movlw	2
   759  07E5  0088               	movwf	8	;volatile
   760                           
   761                           ;main_LCD.c: 45: _delay((unsigned long)((1)*(8000000UL/4000.0)));
   762  07E6  3003               	movlw	3
   763  07E7  00F2               	movwf	??_lcd_reset+1
   764  07E8  3097               	movlw	151
   765  07E9  00F1               	movwf	??_lcd_reset
   766  07EA                     u247:	
   767  07EA  0BF1               	decfsz	??_lcd_reset,f
   768  07EB  2FEA               	goto	u247
   769  07EC  0BF2               	decfsz	??_lcd_reset+1,f
   770  07ED  2FEA               	goto	u247
   771  07EE  2FEF               	nop2
   772  07EF  0008               	return
   773  07F0                     __end_of_lcd_reset:	
   774                           
   775                           	psect	text5
   776  06A7                     __ptext5:	
   777 ;; *************** function _lcd_clear *****************
   778 ;; Defined at:
   779 ;;		line 89 in file "main_LCD.c"
   780 ;; Parameters:    Size  Location     Type
   781 ;;		None
   782 ;; Auto vars:     Size  Location     Type
   783 ;;		None
   784 ;; Return value:  Size  Location     Type
   785 ;;                  1    wreg      void 
   786 ;; Registers used:
   787 ;;		wreg, status,2, status,0, pclath, cstack
   788 ;; Tracked objects:
   789 ;;		On entry : 0/0
   790 ;;		On exit  : 0/0
   791 ;;		Unchanged: 0/0
   792 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   793 ;;      Params:         0       0       0       0       0
   794 ;;      Locals:         0       0       0       0       0
   795 ;;      Temps:          2       0       0       0       0
   796 ;;      Totals:         2       0       0       0       0
   797 ;;Total ram usage:        2 bytes
   798 ;; Hardware stack levels used:    1
   799 ;; Hardware stack levels required when called:    1
   800 ;; This function calls:
   801 ;;		_lcd_cmd
   802 ;; This function is called by:
   803 ;;		_main
   804 ;; This function uses a non-reentrant model
   805 ;;
   806                           
   807                           
   808                           ;psect for function _lcd_clear
   809  06A7                     _lcd_clear:	
   810                           
   811                           ;main_LCD.c: 91: lcd_cmd(0x01);
   812                           
   813                           ;incstack = 0
   814                           ; Regs used in _lcd_clear: [wreg+status,2+status,0+pclath+cstack]
   815  06A7  3001               	movlw	1
   816  06A8  120A  118A  270F  120A  118A  	fcall	_lcd_cmd
   817                           
   818                           ;main_LCD.c: 92: _delay((unsigned long)((1200)*(8000000UL/4000000.0)));
   819  06AD  3004               	movlw	4
   820  06AE  00F4               	movwf	??_lcd_clear+1
   821  06AF  301C               	movlw	28
   822  06B0  00F3               	movwf	??_lcd_clear
   823  06B1                     u257:	
   824  06B1  0BF3               	decfsz	??_lcd_clear,f
   825  06B2  2EB1               	goto	u257
   826  06B3  0BF4               	decfsz	??_lcd_clear+1,f
   827  06B4  2EB1               	goto	u257
   828  06B5  0000               	nop
   829  06B6  0008               	return
   830  06B7                     __end_of_lcd_clear:	
   831                           
   832                           	psect	text6
   833  070F                     __ptext6:	
   834 ;; *************** function _lcd_cmd *****************
   835 ;; Defined at:
   836 ;;		line 48 in file "main_LCD.c"
   837 ;; Parameters:    Size  Location     Type
   838 ;;  cmd             1    wreg     unsigned char 
   839 ;; Auto vars:     Size  Location     Type
   840 ;;  cmd             1    1[COMMON] unsigned char 
   841 ;; Return value:  Size  Location     Type
   842 ;;                  1    wreg      void 
   843 ;; Registers used:
   844 ;;		wreg, status,2, status,0
   845 ;; Tracked objects:
   846 ;;		On entry : 0/0
   847 ;;		On exit  : 0/0
   848 ;;		Unchanged: 0/0
   849 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   850 ;;      Params:         0       0       0       0       0
   851 ;;      Locals:         1       0       0       0       0
   852 ;;      Temps:          1       0       0       0       0
   853 ;;      Totals:         2       0       0       0       0
   854 ;;Total ram usage:        2 bytes
   855 ;; Hardware stack levels used:    1
   856 ;; This function calls:
   857 ;;		Nothing
   858 ;; This function is called by:
   859 ;;		_lcd_init
   860 ;;		_lcd_clear
   861 ;;		_lcd_return_home
   862 ;;		_lcd_cursor_position
   863 ;;		_lcd_entry_mode_set
   864 ;; This function uses a non-reentrant model
   865 ;;
   866                           
   867                           
   868                           ;psect for function _lcd_cmd
   869  070F                     _lcd_cmd:	
   870                           
   871                           ;incstack = 0
   872                           ; Regs used in _lcd_cmd: [wreg+status,2+status,0]
   873                           ;lcd_cmd@cmd stored from wreg
   874  070F  00F2               	movwf	lcd_cmd@cmd
   875                           
   876                           ;main_LCD.c: 50: PORTD = (unsigned)((cmd >> 4) & 0x0F) | 0x20;
   877  0710  0872               	movf	lcd_cmd@cmd,w
   878  0711  00F1               	movwf	??_lcd_cmd
   879  0712  3004               	movlw	4
   880  0713                     u95:	
   881  0713  1003               	clrc
   882  0714  0CF1               	rrf	??_lcd_cmd,f
   883  0715  3EFF               	addlw	-1
   884  0716  1D03               	skipz
   885  0717  2F13               	goto	u95
   886  0718  0871               	movf	??_lcd_cmd,w
   887  0719  390F               	andlw	15
   888  071A  3820               	iorlw	32
   889  071B  1283               	bcf	3,5	;RP0=0, select bank0
   890  071C  1303               	bcf	3,6	;RP1=0, select bank0
   891  071D  0088               	movwf	8	;volatile
   892                           
   893                           ;main_LCD.c: 51: PORTD = (unsigned)((cmd >> 4) & 0x0F);
   894  071E  0872               	movf	lcd_cmd@cmd,w
   895  071F  00F1               	movwf	??_lcd_cmd
   896  0720  3004               	movlw	4
   897  0721                     u105:	
   898  0721  1003               	clrc
   899  0722  0CF1               	rrf	??_lcd_cmd,f
   900  0723  3EFF               	addlw	-1
   901  0724  1D03               	skipz
   902  0725  2F21               	goto	u105
   903  0726  0871               	movf	??_lcd_cmd,w
   904  0727  390F               	andlw	15
   905  0728  0088               	movwf	8	;volatile
   906                           
   907                           ;main_LCD.c: 52: PORTD = (unsigned)(cmd & 0x0F) | 0x20;
   908  0729  0872               	movf	lcd_cmd@cmd,w
   909  072A  390F               	andlw	15
   910  072B  3820               	iorlw	32
   911  072C  0088               	movwf	8	;volatile
   912                           
   913                           ;main_LCD.c: 53: PORTD = (unsigned)(cmd & 0x0F);
   914  072D  0872               	movf	lcd_cmd@cmd,w
   915  072E  390F               	andlw	15
   916  072F  0088               	movwf	8	;volatile
   917                           
   918                           ;main_LCD.c: 54: _delay((unsigned long)((200)*(8000000UL/4000000.0)));
   919  0730  3085               	movlw	133
   920  0731  00F1               	movwf	??_lcd_cmd
   921  0732                     u267:	
   922  0732  0BF1               	decfsz	??_lcd_cmd,f
   923  0733  2F32               	goto	u267
   924                           
   925                           ;main_LCD.c: 55: _delay((unsigned long)((200)*(8000000UL/4000000.0)));
   926  0734  3085               	movlw	133
   927  0735  00F1               	movwf	??_lcd_cmd
   928  0736                     u277:	
   929  0736  0BF1               	decfsz	??_lcd_cmd,f
   930  0737  2F36               	goto	u277
   931  0738  0008               	return
   932  0739                     __end_of_lcd_cmd:	
   933                           
   934                           	psect	text7
   935  06DC                     __ptext7:	
   936 ;; *************** function _Init *****************
   937 ;; Defined at:
   938 ;;		line 18 in file "main_LCD.c"
   939 ;; Parameters:    Size  Location     Type
   940 ;;		None
   941 ;; Auto vars:     Size  Location     Type
   942 ;;		None
   943 ;; Return value:  Size  Location     Type
   944 ;;                  1    wreg      void 
   945 ;; Registers used:
   946 ;;		wreg, status,2
   947 ;; Tracked objects:
   948 ;;		On entry : 0/0
   949 ;;		On exit  : 0/0
   950 ;;		Unchanged: 0/0
   951 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   952 ;;      Params:         0       0       0       0       0
   953 ;;      Locals:         0       0       0       0       0
   954 ;;      Temps:          0       0       0       0       0
   955 ;;      Totals:         0       0       0       0       0
   956 ;;Total ram usage:        0 bytes
   957 ;; Hardware stack levels used:    1
   958 ;; This function calls:
   959 ;;		Nothing
   960 ;; This function is called by:
   961 ;;		_main
   962 ;; This function uses a non-reentrant model
   963 ;;
   964                           
   965                           
   966                           ;psect for function _Init
   967  06DC                     _Init:	
   968                           
   969                           ;main_LCD.c: 19: OSCCON = 0x71;
   970                           
   971                           ;incstack = 0
   972                           ; Regs used in _Init: [wreg+status,2]
   973  06DC  3071               	movlw	113
   974  06DD  1683               	bsf	3,5	;RP0=1, select bank1
   975  06DE  1303               	bcf	3,6	;RP1=0, select bank1
   976  06DF  008F               	movwf	15	;volatile
   977                           
   978                           ;main_LCD.c: 20: ANSEL = 0x00;
   979  06E0  1683               	bsf	3,5	;RP0=1, select bank3
   980  06E1  1703               	bsf	3,6	;RP1=1, select bank3
   981  06E2  0188               	clrf	8	;volatile
   982                           
   983                           ;main_LCD.c: 21: ANSELH = 0x00;
   984  06E3  0189               	clrf	9	;volatile
   985                           
   986                           ;main_LCD.c: 22: PORTA = PORTB = PORTD = PORTD = PORTE = 0x00;
   987  06E4  1283               	bcf	3,5	;RP0=0, select bank0
   988  06E5  1303               	bcf	3,6	;RP1=0, select bank0
   989  06E6  0189               	clrf	9	;volatile
   990  06E7  0188               	clrf	8	;volatile
   991  06E8  0188               	clrf	8	;volatile
   992  06E9  0186               	clrf	6	;volatile
   993  06EA  0185               	clrf	5	;volatile
   994                           
   995                           ;main_LCD.c: 23: TRISA = TRISB = TRISC = TRISD = TRISE = 0x00;
   996  06EB  1683               	bsf	3,5	;RP0=1, select bank1
   997  06EC  1303               	bcf	3,6	;RP1=0, select bank1
   998  06ED  0189               	clrf	9	;volatile
   999  06EE  0188               	clrf	8	;volatile
  1000  06EF  0187               	clrf	7	;volatile
  1001  06F0  0186               	clrf	6	;volatile
  1002  06F1  0185               	clrf	5	;volatile
  1003  06F2  0008               	return
  1004  06F3                     __end_of_Init:	
  1005  007E                     btemp	set	126	;btemp
  1006  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    0
    Data        12
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           13      9       9
    BANK0            80     12      24
    BANK1            80      0       0
    BANK3            85      0       0
    BANK2            96      0       0

Pointer List with Targets:

    lcd_send_string@str	PTR unsigned char  size(1) Largest target is 12
		 -> main@text(BANK0[12]), 


Critical Paths under _main in COMMON

    _main->_lcd_send_string
    _lcd_send_string->_lcd_data
    _lcd_init->_lcd_cmd
    _lcd_init->_lcd_reset
    _lcd_clear->_lcd_cmd

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                16    16      0     413
                                              5 COMMON     4     4      0
                                              0 BANK0     12    12      0
                               _Init
                          _lcd_clear
                           _lcd_init
                    _lcd_send_string
 ---------------------------------------------------------------------------------
 (1) _lcd_send_string                                      3     2      1     213
                                              2 COMMON     3     2      1
                           _lcd_data
 ---------------------------------------------------------------------------------
 (2) _lcd_data                                             2     2      0      88
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _lcd_init                                             0     0      0      88
                            _lcd_cmd
                          _lcd_reset
 ---------------------------------------------------------------------------------
 (2) _lcd_reset                                            2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _lcd_clear                                            2     2      0      88
                                              2 COMMON     2     2      0
                            _lcd_cmd
 ---------------------------------------------------------------------------------
 (2) _lcd_cmd                                              2     2      0      88
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _Init                                                 0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Init
   _lcd_clear
     _lcd_cmd
   _lcd_init
     _lcd_cmd
     _lcd_reset
   _lcd_send_string
     _lcd_data

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               55      0       0       9        0.0%
BITBANK3            55      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50      C      18       5       30.0%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               D      9       9       1       69.2%
BITCOMMON            D      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      21      12        0.0%
ABS                  0      0      21       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.42 build -159332390 
Symbol Table                                                                                   Wed Oct 11 21:29:31 2017

             lcd_data@dat 0072                         pc 0002               __CFG_CP$OFF 0000  
                      l68 07A5                        u95 0713                        fsr 0004  
             __CFG_LVP$ON 0000                       l643 06C9                       u105 0721  
                     u115 073D                       u125 074B                       u207 07AE  
                     u160 076D                       u217 07BD                       u227 07CC  
                     u237 07DB                       u247 07EA                       u257 06B1  
                     u177 0799              __CFG_CPD$OFF 0000                       u267 0732  
                     u187 075E                       u277 0736                       u197 0762  
                     fsr0 0004                       indf 0000                      _Init 06DC  
            __CFG_WRT$OFF 0000             __CFG_FCMEN$ON 0000                      _main 0765  
   lcd_send_string@length 0073                      btemp 007E          ?_lcd_send_string 0073  
                    start 0001             __CFG_IESO$OFF 0000             __CFG_MCLRE$ON 0000  
                   ?_Init 0071                     ?_main 0071             __CFG_WDTE$OFF 0000  
                   _ANSEL 0188                     _PORTA 0005                     _PORTB 0006  
                   _PORTD 0008                     _PORTE 0009                     _TRISA 0085  
                   _TRISB 0086                     _TRISC 0087                     _TRISD 0088  
                   _TRISE 0089             __CFG_PWRTE$ON 0000           __end_of_lcd_cmd 0739  
          __CFG_BOREN$OFF 0000                     pclath 000A                     status 0003  
                   wtemp0 007E           __initialization 07F0              __end_of_Init 06F3  
            __end_of_main 07A6                    ??_Init 0071                    ??_main 0076  
                  _ANSELH 0189                    _OSCCON 008F          __end_of_lcd_data 0765  
        __end_of_lcd_init 070F                 ??_lcd_cmd 0071   __end_of__initialization 07FC  
          __pcstackCOMMON 0071              __pidataBANK0 069B        __size_of_lcd_clear 0010  
      __size_of_lcd_reset 004A                __pmaintext 0765                 ?_lcd_data 0071  
               ?_lcd_init 0071         __end_of_lcd_clear 06B7         __end_of_lcd_reset 07F0  
__size_of_lcd_send_string 0014                   __ptext1 06C8                   __ptext2 0739  
                 __ptext3 06F3                   __ptext4 07A6                   __ptext5 06A7  
                 __ptext6 070F                   __ptext7 06DC                   _lcd_cmd 070F  
              ??_lcd_data 0071                ??_lcd_init 0073      end_of_initialization 07FC  
              lcd_cmd@cmd 0072        lcd_send_string@str 0075         ??_lcd_send_string 0074  
     start_initialization 07F0  __CFG_FOSC$INTRC_NOCLKOUT 0000                init_fetch0 06B7  
             __pdataBANK0 0020                 ___latbits 0002             __pcstackBANK0 002C  
       __size_of_lcd_data 002C         __size_of_lcd_init 001C                 _lcd_clear 06A7  
               _lcd_reset 07A6                  ?_lcd_cmd 0071                 main@F1683 0020  
              ?_lcd_clear 0071                ?_lcd_reset 0071           _lcd_send_string 06C8  
        __size_of_lcd_cmd 002A         __CFG_BOR4V$BOR40V 0000                  _lcd_data 0739  
                _lcd_init 06F3             __size_of_Init 0017             __size_of_main 0041  
             ??_lcd_clear 0073                  main@text 002C               ??_lcd_reset 0071  
                init_ram0 06BB   __end_of_lcd_send_string 06DC  
